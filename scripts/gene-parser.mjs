// @ts-check
import { readdir, readFile, writeFile } from "fs/promises";
import { promisify } from "util";
import { exec } from "child_process";
import { join, parse, relative } from "path/posix";

const command = promisify(exec);

/**
 * Generates TypeScript files from ANTLR grammar files.
 * @param {string} src - The source path of the ANTLR grammar file.
 * @param {string} dist - The destination directory for the generated TypeScript files.
 */
async function generate(src, dist) {
  // Execute antlr4ts generate command.
  await command(`npx --no-install antlr4ts ${src} -o ${dist}`);

  const files = await readdir(dist);
  const generatedSource = files.filter((file) => file.endsWith(".ts") && file !== "index.ts");

  // Normalize head comment of generated files.
  await Promise.all(
    generatedSource.map(async (file) => {
      const target = join(dist, file);
      const text = await readFile(target, "utf-8");
      // modifiy the first comment line
      const newText = `\
// This file is modified by scripts/gene-parser.js
${text.replace(/(?<=^\/\/ Generated from )(\S+\.g4)/, (_, path) => relative(parse(target).dir, path))}`;
      await writeFile(target, newText, "utf-8");
      console.log(`Updated ${file}`);
    })
  );

  // Generate index.ts file that exports all generated files.
  await writeFile(
    join(dist, "index.ts"),
    `\
// This file is generated by scripts/gene-parser.js
${generatedSource.map((file) => `export * from "./${file.replace(/\.ts$/, "")}";`).join("\n")}
`,
    "utf-8"
  );
}

/**
 * returns project resource path
 * @param {string} path
 */
function resource(path) {
  return join(process.cwd(), path);
}

const src = resource("Arcade-plus/Assets/Scripts/Aff/ArcaeaFileFormat.g4");
const dist = resource("src/language");
generate(src, dist)
  .then(() => {
    console.log("Generation completed successfully.");
  })
  .catch((error) => {
    console.error("Error during generation:", error);
  });
